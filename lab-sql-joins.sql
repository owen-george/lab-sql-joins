USE sakila;

SELECT * from film_category LIMIT 10;

-- 1 List the number of films per category.
SELECT ca.name, COUNT(fc.film_id) as film_count from sakila.film_category as fc
JOIN sakila.category as ca ON fc.category_id = ca.category_id
GROUP BY ca.name
ORDER BY ca.name;

-- 2 Retrieve the store ID, city, and country for each store.
SELECT s.store_id, ci.city, co.country FROM sakila.store AS s
JOIN sakila.address as a
ON s.address_id = a.address_id
JOIN sakila.city as ci
ON a.city_id = ci.city_id
JOIN sakila.country as co
ON ci.country_id = co.country_id
;

-- 3 Calculate the total revenue generated by each store in dollars.
SELECT s.store_ID, sum(p.amount) as total_revenue FROM sakila.store as s
JOIN sakila.customer as c
ON c.store_id = s.store_id
JOIN sakila.payment as p
ON p.customer_id = c.customer_id
GROUP BY s.store_ID;

-- 4 Determine the average running time of films for each category.
SELECT ca.name, avg(f.length) as avg_length from sakila.film_category as fc
JOIN sakila.category as ca ON fc.category_id = ca.category_id
JOIN sakila.film as f on fc.film_id = f.film_id
GROUP BY ca.name
ORDER BY ca.name;

-- Bonus:
-- 5. Identify the film categories with the longest average running time.
SELECT ca.name, avg(f.length) as avg_length from sakila.film_category as fc
JOIN sakila.category as ca ON fc.category_id = ca.category_id
JOIN sakila.film as f on fc.film_id = f.film_id
GROUP BY ca.name
ORDER BY avg_length DESC
LIMIT 5;

-- 6 Display the top 10 most frequently rented movies in descending order.
SELECT f.title, COUNT(r.rental_id) as times_rented from sakila.film as f
JOIN inventory as i on f.film_id = i.film_id
JOIN rental as r ON r.inventory_id = i.inventory_id
GROUP BY f.title
ORDER BY times_rented desc
LIMIT 10;

-- 7 Determine if "Academy Dinosaur" can be rented from Store 1.
SELECT f.title, COUNT(r.rental_id) as times_rented from sakila.film as f
JOIN inventory as i on f.film_id = i.film_id
JOIN rental as r ON r.inventory_id = i.inventory_id
WHERE f.title = "ACADEMY DINOSAUR" AND i.store_id = 1
GROUP BY f.title
ORDER BY times_rented desc
LIMIT 10;

-- 8 Provide a list of all distinct film titles, along with their availability status in the inventory.
-- Include a column indicating whether each title is 'Available' or 'NOT available.'
-- Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL."
SELECT distinct(f.title), 
CASE WHEN i.film_id is not null then 'Available'
ELSE 'NOT available'
END AS availability
 from sakila.film as f
RIGHT JOIN inventory as i on i.film_id = f.film_id;